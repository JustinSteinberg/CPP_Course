//Trie.cpp
//Author: Justin Steinberg
//Comp15 HW3
//Date: March 10th, 2019
//Implementation of Trie Structure
//////////////////////////////////////

////SHOWS THE PROGRESSION OF MY CODE////
///THIS IS WHEN I FIRST STARTED CODING//
////////////////////////////////////////

#include <iostream>
#include <fstream>
#includesstream>
#include "Trie.h"

using namespace std;

Trie::Trie()
{
    root = NULL;
}


Node * Trie::getNode(){

    Node * new_node = new Node();
    new_node->is_end = false;
    for(int i = 0; i < 5; i++){
        new_node->children[i] = NULL; 
    }
    return new_node;
}


void Trie::insert(string key)
{
     insert(root, key);
}


void Trie::insert(Node * node, string key){
    
    struct Node * curr = node;
    for(int i = 0; i < key.length(); i++){
        int index = key[i] - 'a';
        if(!curr->children[index]){
            curr->children[index] = getNode();
        }
    }
    curr->is_end = true;  //Mark end of word
}

bool Trie::search(string key)
{
     if(root == NULL){
         return false;
     }
     return search(root, string);
}

bool Trie::search(Node * node, string key){
    struct Node * curr = node;
    for(int i = 0; i < key.length(); i++){
        int index = key[i] = 'a';
        if(!curr->children[index]){
            return false;
        }
        curr = curr->children[index];
    }
    
    return (curr != NULL && curr->is_end);
}

 
