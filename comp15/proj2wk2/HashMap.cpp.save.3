#include "HashNode.h"
#include "HashMap.h"
#include <iomanip>
#include <iostream>
#include <string>
#include <functional>
#include <algorithm>

using namespace std;

template<typename K, typename V>
HashMap<K,V>::HashMap(){

    capacity = 10000; 
    size = 0;
    arr = new HashNode<K,V>*[capacity];
    
    for(int i = 0; i < capacity; i++){
        arr[i] = NULL;
    }
    
    dummie = new HashNode<K,V>("","");
}

template<typename K, typename V>        
int HashMap<K,V>::HashCode(K key){
    int value = 0;
    hash<string> str_hash;
    value = str_hash(key);
    return value % capacity;
}


template<typename K, typename V>
void HashMap<K,V>::InsertNode(K key, V value){

 //   cout << "Before HashCode " << endl;

    int Index = HashCode(key);

  //  cout << "Got The Index " << Index << endl;

    if(arr[Index] != NULL && arr[Index]->key == key){
        cout << "Before Pushing to Values Vector: "<< value << endl;
        arr[Index]->values.push_back(value);
        cout << "After pushing to Values Vector" << endl;
    }

    else{

        cout << "In the else statement " << endl;

        HashNode<K,V> * temp = new HashNode<K,V>(key, value);

      //  cout << "Made Temp Node" << endl;

     //   cout << "KEY : " << key << endl;

        while(arr[Index] != NULL && arr[Index]->key != key && arr[Index]->key != "")
        {
            Index++;
            Index %= capacity;
      //      cout << "INDEX IN WHILE LOOP: " << Index << endl;
        }

     //   cout << "Got through the while loop " << endl;

        if(arr[Index] == NULL || arr[Index]->key == ""){
            size++;
        }
    
    //    cout << "Adding to arr " << endl;

        arr[Index] = temp;

        cout << "Added to arr " << "Index: " << Index << " Key: " << arr[Index]->key << endl;

    } 

}

template<typename K, typename V>
V HashMap<K,V>::DeleteNode(K key){

    cout << "IN DELETE NODE" << endl;

    int Index = HashCode(key);

    cout << "GOT THE INDEX: "<< Index  << endl;

    cout << "KEY: " << arr[Index-2]->key << endl;
    
    if(arr[Index]->key == key && arr[Index]->values.size() > 1){
  
       cout << "Size of Values: " << arr[Index]->values.size() << endl;

        arr[Index]->values.pop_back();
        return arr[Index]->value;
    }

    else{
        cout << "In Else STATEMENT" << endl;   

        while(arr[Index] != NULL)
        {
            cout << "In While Loop" << endl;

            if(arr[Index]->key == key)
            {
 
                cout << "Found Key" << endl;
                HashNode<K,V> *temp = arr[Index];
                arr[Index] = dummie;
                cout << "Set Index To DUMMIE" << endl;
                size--;
                return temp->value;

                
            }
            Index++;
            Index %= capacity;
        }

    return "";   //if it wasnt found return null

    }

}


template<typename K, typename V>
V HashMap<K,V>::get(K key){

    int Index = HashCode(key);
    int count = 0;

    while(arr[Index] != NULL)
    {
        if(count++>capacity){
            return "";
        }
        if(arr[Index]->key == key){
            return arr[Index]->value;
        }
        Index++;
        Index %= capacity;
    }

    return "Not in Table";

}
 
template<typename K, typename V>
int HashMap<K,V>::sizeofMap(){
    
    return size;

}

template<typename K, typename V>
bool HashMap<K,V>::isEmpty(){

    return size == 0;

}

template<typename K, typename V>
void HashMap<K,V>::display(){

    for(int i = 0; i < capacity; i++){
        if(arr[i] != NULL && arr[i]->key != ""){
            cout << "key = " << arr[i]->key << " value = " << arr[i]->value <<endl;
        }
    }

}

//template class HashMap<int, int>;
//template class HashMap<double, double>;
template class HashMap<string, string>;
//template class HashMap<string, int>;
